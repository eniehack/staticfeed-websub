// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package models

import (
	"context"
	"time"
)

const getUserFromID = `-- name: GetUserFromID :one
SELECT id, access_token, refresh_token, created_at, expired_at, updated_at, deleted_at FROM users WHERE id = ?
`

func (q *Queries) GetUserFromID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertNewToken = `-- name: InsertNewToken :exec
INSERT INTO users (id, access_token, refresh_token, created_at, expired_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertNewTokenParams struct {
	ID           string
	AccessToken  string
	RefreshToken string
	CreatedAt    time.Time
	ExpiredAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) InsertNewToken(ctx context.Context, arg InsertNewTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertNewToken,
		arg.ID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.ExpiredAt,
		arg.UpdatedAt,
	)
	return err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE users SET access_token = ?, refresh_token = ?, expired_at = ?, updated_at = ?
WHERE id = ?
`

type UpdateTokenParams struct {
	AccessToken  string
	RefreshToken string
	ExpiredAt    time.Time
	UpdatedAt    time.Time
	ID           string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiredAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
